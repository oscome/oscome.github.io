<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on </title>
    <link>https://oscome.cn/book/kubernetes/</link>
    <description>Recent content in k8s on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 10 Oct 2022 10:28:28 +0800</lastBuildDate><atom:link href="https://oscome.cn/book/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基础知识</title>
      <link>https://oscome.cn/book/kubernetes/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/kubernetes/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Kubernetes是什么？  Kubernetes是容器集群管理系统，是Google 2014年创建管理的，是Google 10多年大规模容器管理技术Borg的开源版本，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。
通过Kubernetes你可以：
 快速部署应用 快速扩展应用 无缝对接新的应用功能 节省资源，优化硬件资源的使用  Kubernetes的目标是促进完善组件和工具的生态系统，以减轻应用程序在公有云或私有云中运行的负担。
Kubernetes 特点   可移植: 支持公有云，私有云，混合云，多重云（multi-cloud） 可扩展: 模块化, 插件化, 可挂载, 可组合 自动化: 自动部署，自动重启，自动复制，自动伸缩/扩展  使用容器的优势   **快速创建/部署应用：**与VM虚拟机相比，容器镜像的创建更加容易。 **持续开发、集成和部署：**提供可靠且频繁的容器镜像构建/部署，并使用快速和简单的回滚(由于镜像不可变性)。 **开发和运行相分离：**在build或者release阶段创建容器镜像，使得应用和基础设施解耦。 **开发，测试和生产环境一致性：**在本地或外网（生产环境）运行的一致性。 **云平台或其他操作系统：**可以在 Ubuntu、RHEL、 CoreOS、on-prem、Google Container Engine或其它任何环境中运行。 **Loosely coupled，分布式，弹性，微服务化：**应用程序分为更小的、独立的部件，可以动态部署和管理。 资源隔离 **资源利用：**更高效  Kubernetes架构  Kubernetes借鉴了Borg的设计理念，比如Pod、Service、Labels和单Pod单IP等。Kubernetes的整体架构跟Borg非常像，如下图所示
Kubernetes主要由以下几个核心组件组成：
 etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制； controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等； scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上； kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理； Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）； kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；  除了核心组件，还有一些推荐的Add-ons：
 kube-dns负责为整个集群提供DNS服务 Ingress Controller为服务提供外网入口 Heapster提供资源监控 Dashboard提供GUI Federation提供跨可用区的集群 Fluentd-elasticsearch提供集群日志采集、存储与查询  分层架构  Kubernetes设计理念和功能其实就是一个类似Linux的分层架构，如下图所示</description>
    </item>
    
  </channel>
</rss>
