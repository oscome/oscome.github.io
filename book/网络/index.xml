<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络 on </title>
    <link>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 网络 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 10 Oct 2022 10:28:28 +0800</lastBuildDate><atom:link href="https://oscome.cn/book/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>http状态码</title>
      <link>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/http%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/http%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>   分类 分类描述     1** 信息，服务器收到请求，需要请求者继续执行操作   2** 成功，操作被成功接收并处理   3** 重定向，需要进一步的操作以完成请求   4** 客户端错误，请求包含语法错误或无法完成请求   5** 服务器错误，服务器在处理请求的过程中发生了错误       状态码 状态码英文名称 中文描述     100 Continue 继续，客户端应继续其请求   101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议        200 OK 请求成功。一般用于GET与POST请求   201 Created 已创建。成功请求并创建了新的资源   202 Accepted 已接受。已经接受请求，但未处理完成   203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本   204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档   205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域   206 Partial Content 部分内容。服务器成功处理了部分GET请求        300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择   301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替   302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI   303 See Other 查看其它地址。与301类似。使用GET和POST请求查看   304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源   305 Use Proxy 使用代理。所请求的资源必须通过代理访问   306 Unused 已经被废弃的HTTP状态码   307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向        400 Bad Request 客户端请求的语法错误，服务器无法理解   401 Unauthorized 请求要求用户的身份认证   402 Payment Required 保留，将来使用   403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求   404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&amp;quot;您所请求的资源无法找到&amp;quot;的个性页面   405 Method Not Allowed 客户端请求中的方法被禁止   406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求   407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权   408 Request Time-out 服务器等待客户端发送的请求时间过长，超时   409 Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突   410 Gone 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置   411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息   412 Precondition Failed 客户端请求信息的先决条件错误   413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息   414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理   415 Unsupported Media Type 服务器无法处理请求附带的媒体格式   416 Requested range not satisfiable 客户端请求的范围无效   417 Expectation Failed 服务器无法满足Expect的请求头信息   429 Too Many Requests 太多请求   500 Internal Server Error 服务器内部错误，无法完成请求   501 Not Implemented 服务器不支持请求的功能，无法完成请求   502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应   503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中   504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求   505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理    </description>
    </item>
    
    <item>
      <title>OSI七层网络协议</title>
      <link>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/osi%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/osi%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</guid>
      <description>说明  OSI 是Open System Interconnect的缩写，意为开放式系统互联。
OSI参考模型各个层次的划分遵循下列原则：
 根据不同层次的抽象分层 每层应当有一个定义明确的功能 每层功能的选择应该有助于制定网络协议的国际标准。 各层边界的选择应尽量节省跨过接口的通信量。 层数应足够多，以避免不同的功能混杂在同一层中，但也不能太多，否则体系结构会过于庞大 同一层中的各网络节点都有相同的层次结构，具有同样的功能。 同一节点内相邻层之间通过接口(可以是逻辑接口)进行通信。 七层结构中的每一层使用下一层提供的服务，并且向其上层提供服务。 不同节点的同等层按照协议实现对等层之间的通信。  根据以上标准，OSI参考模型从上到下：
 物理层-&amp;gt;数据链路层-&amp;gt;网络层-&amp;gt;传输层-&amp;gt;会话层-&amp;gt;表示层-&amp;gt;应用层【物数网传会表应】
  物理层涉及在信道上传输的原始比特流。 数据链路层的主要任务是加强物理层传输原始比特流的功能，使之对应的网络层显现为一条无错线路。发送包把输入数据封装在数据帧，按顺序传送出去并处理接收方回送的确认帧。 网络层关系到子网的运行控制，其中一个关键问题是确认从源端到目的端如何选择路由。 传输层的基本功能是从会话层接收数据而且把其分成较小的单元传递给网络层。 会话层允许不同机器上的用户建立会话关系。 表示层用来完成某些特定的功能。 应用层包含着大量人们普遍需要的协议。  各层功能见下表：
七层模型的每一层都具有清晰的特征。基本来说: 1)第七至第四层(应用层-&amp;gt;表示层-&amp;gt;会话层-&amp;gt;传输层)处理数据源和数据目的地之间的端到端通信， 2)第三至第一层（网络层-&amp;gt;数据链路层-&amp;gt;物理层）处理网络设备间的通信。
另一种分层  OSI模型的七层也可以划分为两组：
 上层（层7、层6和层5，即应用层-&amp;gt;表示层-&amp;gt;会话层）。上层处理应用程序问题，并且通常只应用在软件上。最高层，即应用层是与终端用户最接近的。 下层（层4、层3、层2和层1，即传输层-&amp;gt;网络层-&amp;gt;数据链路层-&amp;gt;物理层）。下层是处理数据传输的。物理层和数据链路层应用在硬件和软件上。最底层，即物理层是与物理网络媒介（比如说，电线）最接近的，并且负责在媒介上发送  参考   网络知识梳理&amp;ndash;OSI七层网络与TCP/IP五层网络架构及二层/三层网络  </description>
    </item>
    
    <item>
      <title>tcp 三次握手和四次挥手</title>
      <link>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/tcp/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/tcp/</guid>
      <description>三次握手   第一次握手：客户端给服务器发送一个 SYN 报文。 第二次握手：服务器收到 SYN 报文之后，会应答一个 SYN+ACK 报文。 第三次握手：客户端收到 SYN+ACK 报文之后，会回应一个 ACK 报文。服务器收到 ACK 报文之后，三次握手建立完成。  这样三次握手就确认客户端和服务端的接收与发送能力正常。
两次不可以吗？  刚开始客户端处于 closed 的状态，服务端处于 listen 状态。然后
1、第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)。此时客户端处于 SYN_Send 状态。
2、第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。
3、第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 establised 状态。
4、服务器收到 ACK 报文之后，也处于 establised 状态，此时，双方以建立起了链接。
三次握手的作用  TCP 建立连接时，通过三次握手能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号。序列号能够保证数据包不重复、不丢弃和按序传输。</description>
    </item>
    
    <item>
      <title>tcp、udp对比</title>
      <link>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/tcp%E5%92%8Cudp/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/%E7%BD%91%E7%BB%9C/tcp%E5%92%8Cudp/</guid>
      <description>    UDP TCP     是否连接 无连接 面向连接   是否可靠 不可靠传输，不使用流量控制和拥塞控制 可靠传输，使用流量控制和拥塞控制   连接对象个数 支持一对一，一对多，多对一和多对多交互通信 只能是一对一通信   传输方式 面向报文 面向字节流   首部开销 首部开销小，仅8字节 首部最小20字节，最大60字节   适用场景 适用于实时应用（IP电话、视频会议、直播等） 适用于要求可靠传输的应用，例如文件传输    </description>
    </item>
    
  </channel>
</rss>
