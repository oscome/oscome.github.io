<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识合集 on </title>
    <link>https://oscome.cn/book/</link>
    <description>Recent content in 知识合集 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 10 Oct 2022 10:28:28 +0800</lastBuildDate><atom:link href="https://oscome.cn/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>说明</title>
      <link>https://oscome.cn/book/readme/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/readme/</guid>
      <description>知识合集是小欧搜集总结的一些编程知识，涉及但不限于 go、php、mysql、es、redis、k8s 等知识。
如果对你有用，欢迎关注或者赞赏。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/nosql/mongodb/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/nosql/mongodb/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>From: 小白必须懂的MongoDB的十大总结
一、MongoDB的认识  1、什么是MongoDB？  MongoDB 是一个介于关系数据库和非关系数据库之间的开源产品，是最接近于关系型数据库的 NoSQL 数据库。它在轻量级JSON 交换基础之上进行了扩展，即称为 BSON 的方式来描述其无结构化的数据类型。尽管如此它同样可以存储较为复杂的数据类型。它和Redis有异曲同工之妙。虽然两者均为 NoSQL ，但是 MongoDB 相对于 Redis 而言，MongoDB 更像是传统的数据库。早些年我们是先有了 Relation Database (关系型数据库)，然后出现了很多很复杂的query ，里面用到了很多嵌套，很多 join 操作。所以在设计数据库的时候，我们也考虑到了如何应用他们的关系，使得写 query 可以使 database 效率达到最高。后来人们发现，不是每个系统，都需要如此复杂的关系型数据库。有些简单的网站，比如博客，比如社交网站，完全可以斩断数据库之间的一切关系。这样做带来的好处是，设计数据库变得更加简单，写 query 也变得更加简单。然后，query 消耗的时间可能也会变少。因为 query 简单了，少了许多消耗资源的 join 操作，速度自然会上去。正如所说的， query 简单了，很有以前 MySQL 可以找到的东西，现在关系没了，通过 Mongo 找不到了。我们只能将几组数据都抓到本地，然后在本地做 join ，所以在这点上可能会消耗很多资源。这里我们可以发现。如何选择数据库，完全取决于你所需要处理的数据的模型，即 Data Model 。如果它们之间，关系错综复杂，千丝万缕，这个时候 MySQL 一定是首选。如果他们的关系并不是那么密切，那么， NoSQL 将会是利器。
MongoDB 和 Redis 一样均为 key-value 存储系统，它具有以下特点：
 面向集合存储，易存储对象类型的数据。 模式自由。 支持动态查询。 支持完全索引，包含内部对象。 支持查询。 支持复制和故障恢复。 使用高效的二进制数据存储，包括大型对象(如视频等)。 自动处理碎片，以支持云计算层次的扩展性 支持 Python ， PHP ， Ruby ， Java ， C ， C# ， Javascript ，Perl 及 C++ 语言的驱动程序，社区中也提供了对 Erlang 及 .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/nosql/mongodb/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/nosql/mongodb/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>安装  // 下载，注意下载对应的系统版本，否则安装会报错 wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.4.1.tgz // 解压即可，无需编译安装 tar -zxvf mongodb-linux-x86_64-rhel70-4.4.1.tgz mv mongodb-linux-x86_64-rhel70-4.4.1 /usr/local/mongodb  启动服务  新建mongodb.conf（版本可能不一样，略有不同）
dbpath = /data/mongodb/data #数据文件存放目录 logpath = /data/mongodb/log/mongodb.log #日志文件存放目录 port = 27000 #端口 fork = true #以守护程序的方式启用，即在后台运行 bind_ip=127.0.0.1 cd /usr/local/mongodb/ // 启动服务 bin/mongod -f ./mongodb.conf  新增用户  设置密码
use admin; db.createUser({user:&amp;quot;root&amp;quot;,pwd:&amp;quot;666888&amp;quot;,roles:[&amp;quot;userAdminAnyDatabase&amp;quot;]}); use test; db.createUser({ user: &amp;quot;test&amp;quot;, pwd: &amp;quot;123456&amp;quot;, roles: [{role: &amp;quot;readWrite&amp;quot;,db: &amp;quot;hotel&amp;quot;}] }) db.createUser( { user: &amp;quot;admin&amp;quot;, pwd: &amp;quot;5176567&amp;quot;, roles: [{role: &amp;quot;userAdminAnyDatabase&amp;quot;, db: &amp;quot;admin&amp;quot;}] } )  role的说明</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/nosql/mongodb/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/nosql/mongodb/%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/%E5%85%B6%E4%BB%96/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/%E5%85%B6%E4%BB%96/git/</guid>
      <description>概念  4个区  git之所以令人费解，主要是它相比于svn等等传统的版本管理工具，多引入了一个暂存区(Stage)的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么4个区就够了：
 工作区(Working Area) 暂存区(Stage) 本地仓库(Local Repository) 远程仓库(Remote Repository)  5种状态  以上4个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是5种状态。以下我们把这5种状态分别命名为：
 未修改(Origin) 已修改(Modified) 已暂存(Staged) 已提交(Committed) 已推送(Pushed)  检查修改  已修改，未暂存  git diff  已暂存，未提交  git diff --cached  已提交，未推送  git diff master origin/master  撤销修改  了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。
恢复已修改，未暂存  如果我们只是在编辑器里修改了文件，但还没有执行git add .，这时候我们的文件还在工作区，并没有进入暂存区，我们可以用撤销操作
git checkout .  或者
git reset --hard  恢复已暂存，未提交  你已经执行了git add .，但还没有执行git commit -m &amp;quot;comment&amp;quot;。这时候你意识到了错误，想要撤销，你可以执行：
git reset git checkout .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/%E5%85%B6%E4%BB%96/raft%E5%92%8Cpaxos%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/%E5%85%B6%E4%BB%96/raft%E5%92%8Cpaxos%E5%8D%8F%E8%AE%AE/</guid>
      <description>From：Paxos和Raft协议介绍
Paxos和Raft协议介绍   文章来源: 陶老师运维笔记- 微信公众号
 1. 背景介绍  1.1 分布式事务  分布式事务指事务的操作位于不同的分布式系统节点上，需要保证事务的 AICD 特性。 分布式事务处理的难点是必须有一种方法可以知道事务在任何地方所做的所有动作，提交或回滚事务的决定必须产生统一的结果（全部提交或全部回滚）
解决这种分布式一致性问题：其中比较著名的有二阶提交协议（Two Phase Commitment Protocol）、三阶提交协议（Tree Phase Commitment Protocol）和Paxos算法。
1.2 二阶段提交  在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点(称作参与者)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。
因此，二阶段提交的算法思路可以概括为： 参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。 2PC顾名思义分为两个阶段，其实施思路可概括为：
 投票阶段（voting phase）：参与者将操作结果通知协调者； 提交阶段（commit phase）：收到参与者的通知后，协调者再向参与者发出通知，根据反馈情况决定各参与者是否要提交还是回滚；  2. Paxos协议  PAXOS可以用来解决分布式环境下，设置某一个值的问题。 分布式系统中有多个节点就会存在节点间通信的问题，Paxos是基于消息传递的通讯模型的。它的假设前提是，在分布式系统中进程之间的通信会出现丢失、延迟、重复等现象，但不会出现传错的现象。Paxos算法就是为了保证在这样的系统中进程间基于消息传递就某个值达成一致。
2.1 角色  Paxos是第一个被证明的共识算法，原理基于两阶段提交并进行扩展。算法中将节点分为三种类型：
 倡议者proposer：提交一个提案，等待大家批准为结案，往往是客户端担任。提案信息包括提案编号和提议的value。 接受者acceptor：负责对提案进行投票，往往服务器担任。若提案获得多数Acceptors的接受，则称该提案被批准（chosen）。 学习者learner：被告知提案结果，只能“学习”被批准的提案。不参与投票过程。客户端和服务端都可担任。  每个节点在协议中可以担任多个角色。
2.2 Paxos算法    segmentfault.com/a/119000000… www.cnblogs.com/hzmark/p/pa…   Paxos的特点：
 一个或多个节点可以提出提议 系统针对所有提案中的某个提案必须达成一致 最多只能对一个确定的提案达成一致 只要超过半数的节点存活且可互相通信，整个系统一定能达成一致状态  2.2.1 Paxos表决   首先proposers将value发送给Acceptors。 Acceptors对value进行接受（accept）。acceptor可以回应接受或拒绝。 一旦节点中的大多数回应接受，共识就能达成，接受的value成为正式的决议（称为“批准”决议）。  整个过程（一个事务或一个Round）分为两个阶段：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/%E5%85%B6%E4%BB%96/%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/%E5%85%B6%E4%BB%96/%E6%9E%B6%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://oscome.cn/book/%E5%85%B6%E4%BB%96/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oscome.cn/book/%E5%85%B6%E4%BB%96/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>面向对象的核心思想：对象，封装，可重用性，可扩展性。
面向对象三要素：封装、继承、多态。
面向对象五大原则：
 单一职责原则SRP(减少耦合，提高复用性) 接口隔离原则ISP（定制化服务设计） 开放-封闭原则OCP（一个模块在扩展性方面应该是开放的，在更改性方面是封闭的） 替换原则LSP 依赖倒置原则IOC（核心是解耦）  常用设计模式   单例模式：确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 工厂模式：把创建对象的过程封装起来，这样随时可以产生一个新的对象，减少代码之间耦合。 策略模式：定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。 观察者模式：（有时又被称为发布（publish ）-订阅（Subscribe）模式、模型-视图（View）模式、源-收听者(Listener)模式或从属者模式），在此种模式中，当一个对象状态发生改变时，依赖它的对象全部会收到通知，并自动更新。 注册树模式：注册树模式也叫注册模式或注册器模式。注册树模式将对象实例注册到一棵全局的对象树上，需要的时候从对象树上获取即可。 装饰器模式：允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 DI  </description>
    </item>
    
  </channel>
</rss>
