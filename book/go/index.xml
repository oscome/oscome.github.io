<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on </title>
    <link>https://oscome.cn/book/go/</link>
    <description>Recent content in go on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 10 Oct 2022 10:28:28 +0800</lastBuildDate><atom:link href="https://oscome.cn/book/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>进程线程协程</title>
      <link>https://oscome.cn/book/go/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/go/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>进程  通俗点讲，程序运行起来就是进程。
每个进程都有自己的独立内存空间，拥有自己独立的地址空间、独立的堆和栈，既不共享堆，亦不共享栈。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。
操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位。
进程间的通信方式   管道(Pipe) 命名管道(FIFO) 消息队列(Message Queue) 信号量(Semaphore) 共享内存（Shared Memory） 套接字（Socket）  线程  有时被称为轻量级进程(Lightweight Process，LWP），是操作系统调度（CPU调度）执行的最小单位。（注意进程是操作系统分配资源的最小单位）。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。总的来说，进程和线程的区别如下：
 线程是调度执行的基本单位，进程作为拥有资源的基本单位； 进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。进程所维护的是程序所包含的资源（静态资源）， 如：地址空间，打开的文件句柄集，文件系统状态，信号处理handler等；线程所维护的运行相关的资源（动态资源），如：运行栈，调度相关的控制信息，待处理的信号集等； 在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。  协程  协程是一种用户态的轻量级线程，协程的调度完全由用户控制（即协程相对于操作系统来说是透明的，操作系统根本不知道协程的存在）。协程和线程一样共享堆，不共享栈，协程由程序员在协程的代码里显示调度。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。
goroutine  go语言中并发指的是让某个函数独立于其他函数运行的能力，一个goroutine就是一个独立的工作单元，Go的runtime（运行时）会在逻辑处理器上调度这些goroutine来运行，一个逻辑处理器绑定一个操作系统线程，所以说goroutine不是线程，它是一个协程，也是这个原因，它是由Go语言运行时本身的算法实现的。
这里我们总结下几个概念：
   概念 说明     进程 一个程序对应一个独立程序空间   线程 一个执行空间，一个进程可以有多个线程   逻辑处理器 执行创建的goroutine，绑定一个线程（指的是操作系统线程，即内核线程）   调度器 Go运行时中的，分配goroutine给不同的逻辑处理器   全局运行队列 所有刚创建的goroutine都会放到这里   本地运行队列 逻辑处理器的goroutine队列    当我们创建一个goroutine的后，会先存放在全局运行队列中，等待Go运行时的调度器进行调度，把他们分配给其中的一个逻辑处理器，并放到这个逻辑处理器对应的本地运行队列中，最终等着被逻辑处理器执行即可。
PS：</description>
    </item>
    
    <item>
      <title>goroutine原理</title>
      <link>https://oscome.cn/book/go/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/go/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</guid>
      <description>Rob Pike说，Goroutine是一个与其他 goroutine 并发运行在同一地址空间的Go函数或方法。一个运行的程序由一个或更多个goroutine组成。它与线程、协程、进程等不同。它是一个goroutine。
 goroutine VS 协程   goroutine 通过通道来通信，而协程通过让出和恢复操作来通信 goroutine 通过 Go 的调度器进行调度，而协程通过程序本身调度  调度原理  goroutine 调度器的线程模型为两级线程模型。(有关两级线程模型的介绍，可以看文章拓展部分)
Go 实现的两级线程模型，也就是 GMP 模型：
 M：内核级的线程 P：全程Processor，代表运行Go协程所需要的资源（上下文环境） G：goroutine  其数据结构如下：
   名称 作用范围 描述     全局M列表 Go的运行时 存放所有M的单向链表   全局P列表 Go的运行时 存放所有P的数组   全局G列表 Go的运行时 存放所有G的切片   调度器的空闲M列表 调度器 存放空闲M的单向链表   调度器的空闲P列表 调度器 存放空闲P的单向链表   调度器的自由G列表 调度器 存放自由G的单向链表（有两个）   调度器的可运行G队列 调度器 存放可运行G的队列   P的自由G列表 本地P 存放当前P中自由G的单向链表   P的可运行G队列 本地P 存放当前P中可运行G的队列    从下往上看：</description>
    </item>
    
    <item>
      <title>gc垃圾回收</title>
      <link>https://oscome.cn/book/go/gc/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/go/gc/</guid>
      <description>Golang的标记清除  如下图，通过gcmarkBits位图标记span的块是否被引用。对应内存分配中的bitmap区。
三色标记    白色：对象未被标记，gcmarkBits对应的位为0（该对象将会在本次GC中被清理）
  灰色：对象已被标记，但这个对象包含的子对象未标记
  黑色：对象已被标记，且这个对象包含的子对象也已标记，gcmarkBits对应的位为1（该对象不会在本次GC中被清理）
  例如，当前内存中有A~F一共6个对象，根对象a,b本身为栈上分配的局部变量，根对象a、b分别引用了对象A、B, 而B对象又引用了对象D，则GC开始前各对象的状态如下图所示:
 初始状态下所有对象都是白色的。 接着开始扫描根对象a、b; 由于根对象引用了对象A、B,那么A、B变为灰色对象，接下来就开始分析灰色对象，分析A时，A没有引用其他对象很快就转入黑色，B引用了D，则B转入黑色的同时还需要将D转为灰色，进行接下来的分析。 灰色对象只有D，由于D没有引用其他对象，所以D转入黑色。标记过程结束 最终，黑色的对象会被保留下来，白色对象会被回收掉。  GC的触发   阈值：默认内存扩大一倍，启动gc 定期：默认2min触发一次gc，src/runtime/proc.go:forcegcperiod 手动：runtime.gc()  STW  stop the world是gc的最大性能问题，对于gc而言，需要停止所有的内存变化，即停止所有的goroutine，等待gc结束之后才恢复。
标记-清除(mark and sweep)算法的STW(stop the world)操作，就是runtime把所有的线程全部冻结掉，所有的线程全部冻结意味着用户逻辑是暂停的。这样所有的对象都不会被修改了，这时候去扫描是绝对安全的。
Go如何减短这个过程呢？标记-清除(mark and sweep)算法包含两部分逻辑：标记和清除。
我们知道Golang三色标记法中最后只剩下的黑白两种对象，黑色对象是程序恢复后接着使用的对象，如果不碰触黑色对象，只清除白色的对象，肯定不会影响程序逻辑。所以： 清除操作和用户逻辑可以并发。
标记操作和用户逻辑也是并发的，用户逻辑会时常生成对象或者改变对象的引用，那么标记和用户逻辑如何并发呢？这里就让说到golang的写屏障了。
GC流程   Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC Mark: 扫描所有根对象, 和根对象可以到达的所有对象, 标记它们不被回收 Mark Termination: 完成标记工作, 重新扫描部分根对象(要求STW) Sweep: 按标记结果清扫span  目前整个GC流程会进行两次STW(Stop The World), 第一次是Mark阶段的开始, 第二次是Mark Termination阶段.</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>https://oscome.cn/book/go/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 12 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/go/%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>= 和 := 的区别  前者赋值，后者声明+赋值。
指针的作用  指针用来保存变量的地址。
Go 有异常类型吗？  Go 没有异常类型，只有错误类型（Error），通常使用返回值来表示异常状态。
什么是 Goroutine  Goroutine 是与其他函数或方法同时运行的函数或方法。 Goroutines 可以被认为是轻量级的线程。 与线程相比，创建 Goroutine 的开销很小。 Go应用程序同时运行数千个 Goroutine 是非常常见的做法。
defer 的执行顺序  多个 defer 语句，遵从后进先出(Last In First Out，LIFO)的原则，最后声明的 defer 语句，最先得到执行。 defer 在 return 语句之后执行，但在函数退出之前，defer 可以修改返回值。
Go 语言 tag 的用处？  tag 可以理解为 struct 字段的注解，可以用来定义字段的一个或多个属性。框架/工具可以通过反射获取到某个字段定义的属性，采取相应的处理方式。tag 丰富了代码的语义，增强了灵活性。
new和make的区别  new的作用是初始化一个指向类型的指针(*T)
new函数是内建函数，函数定义：func new(Type) *Type
使用new函数来分配空间。传递给new 函数的是一个类型，不是一个值。返回值是指向这个新分配的零值的指针。
make 的作用是为 slice，map 或 chan 初始化并返回引用(T)。
make函数是内建函数，函数定义：func make(Type, size IntegerType) Type</description>
    </item>
    
  </channel>
</rss>
