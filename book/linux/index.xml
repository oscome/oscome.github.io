<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on </title>
    <link>https://oscome.cn/book/linux/</link>
    <description>Recent content in Linux on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 10 Oct 2022 10:28:28 +0800</lastBuildDate><atom:link href="https://oscome.cn/book/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常见命令</title>
      <link>https://oscome.cn/book/linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
      <description>文件操作     命令 说明     cat 用于连接文件并打印到标准输出设备上。   chmod 设定文件权限   diff 比较文件的差异   file 辨识文件类型   find 在指定目录下查找文件   grep 查找文件里符合条件的字符串   cd 切换当前工作目录   ls 显示指定工作目录下之内容   exit 退出目前的shell   kill 删除执行中的程序或工作   mv 用来为文件或目录改名、或将文件或目录移入其它位置   rm 删除一个文件或者目录 -r递归删除 -f强制删除   cp 用于复制文件或目录   tail 输出文件尾部内容   mkdir 新建目录   touch 新建文件   pwd 输出当前目录    系统管理命令     命令 说明     who 显示在线登陆用户   whoami 显示当前操作用户   ps 显示当前进程 (process) 的状态    vim使用  vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</description>
    </item>
    
    <item>
      <title>五大IO模型</title>
      <link>https://oscome.cn/book/linux/%E4%BA%94%E5%A4%A7io%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 09 Oct 2018 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/linux/%E4%BA%94%E5%A4%A7io%E6%A8%A1%E5%9E%8B/</guid>
      <description>阻塞io(同步io)BIO  发起请求就一直等待，直到数据返回。好比你去商场试衣间，里面有人，那你就一直在门外等着。(全程阻塞)　非阻塞io(同步io)NIO  不管有没有数据都返回，没有就隔一段时间再来请求，如此循环。好比你要喝水，水还没烧开，你就隔段时间去看一下饮水机，直到水烧开为止。(复制数据时阻塞)
io复用(同步io)  I/O是指网络I/O,多路指多个TCP连接(即socket或者channel）,复用指复用一个或几个线程。 意思说一个或一组线程处理多个连接。比如课堂上学生做完了作业就举手，老师就下去检查作业。 (对一个IO端口，两次调用，两次返回，比阻塞IO并没有什么优越性；关键是能实现同时对多个IO端口进行监听，可以同时对多个读/写操作的IO函数进行轮询检测，直到有数据可读或可写时，才真正调用IO操作函数。)
信号驱动io(同步io)  事先发出一个请求，当有数据后会返回一个标识回调，这时你可以去请求数据。 好比银行排号，当叫到你的时候，你就可以去处理业务了(复制数据时阻塞)。
异步io AIO  发出请求就返回，剩下的事情会异步自动完成，不需要做任何处理。好比有事秘书干，自己啥也不用管。
总结  五种IO的模型：阻塞IO、非阻塞IO、多路复用IO、信号驱动IO和异步IO；前四种都是同步IO，在内核数据copy到用户空间时都是阻塞的。
阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果会那就是传统的阻塞IO，如果不会那就是非阻塞IO。
同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO；如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。
参考：
Linux五大网络IO模型图解</description>
    </item>
    
    <item>
      <title>文件句柄和文件描述符</title>
      <link>https://oscome.cn/book/linux/%E6%96%87%E4%BB%B6%E5%8F%A5%E6%9F%84%E5%92%8C%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</link>
      <pubDate>Mon, 10 Oct 2022 10:28:28 +0800</pubDate>
      
      <guid>https://oscome.cn/book/linux/%E6%96%87%E4%BB%B6%E5%8F%A5%E6%9F%84%E5%92%8C%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</guid>
      <description>文件描述符（file descriptor）  对于linux而言，所有对设备和文件的操作都使用文件描述符来进行的。文件描述符是一个非负的整数，它是一个索引值，指向内核中每个进程打开文件的记录表。当打开一个现存文件或创建一个新文件时，内核就向进程返回一个文件描述符；当需要读写文件时，也需要把文件描述符作为参数传递给相应的函数。 通常，一个进程启动时，都会打开3个文件：标准输入、标准输出和标准出错处理。这3个文件分别对应文件描述符为0、1和2（宏STD_FILENO、STDOUT_FILENO和STDERR_FILENO）。
每一个文件描述符会与一个打开文件相对应，同时，不同的文件描述符也会指向同一个文件。相同的文件可以被不同的进程打开也可以在同一个进程中被多次打开。系统为每一个进程维护了一个文件描述符表，该表的值都是从0开始的，所以在不同的进程中你会看到相同的文件描述符，这种情况下相同文件描述符有可能指向同一个文件，也有可能指向不同的文件。具体情况要具体分析，要理解具体其概况如何，需要查看由内核维护的3个数据结构。
 进程级的文件描述符表 系统级的打开文件描述符表 文件系统的i-node表  由于进程级文件描述符表的存在，不同的进程中会出现相同的文件描述符，它们可能指向同一个文件，也可能指向不同的文件。两个不同的文件描述符，若指向同一个打开文件句柄，将共享同一文件偏移量。因此，如果通过其中一个文件描述符来修改文件偏移量，那么从另一个文件描述符中也会观察到变化，无论这两个文件描述符是否属于不同进程，还是同一个进程，情况都是如此。
 文件句柄 vs 文件描述符  文件句柄也称为文件指针(FILE *)：C语言中使用文件指针做为I/O的句柄。文件指针指向进程用户区中的一个被称为FILE结构的数据结构。FILE结构包括一个缓冲区和一个文件描述符。而文件描述符是文件描述符表的一个索引，因此从某种意义上说文件指针就是句柄的句柄（在Windows系统上，文件描述符被称作文件句柄）。
参考：
 文件句柄（file handles） &amp;amp; 文件描述符（file descriptors）  </description>
    </item>
    
  </channel>
</rss>
