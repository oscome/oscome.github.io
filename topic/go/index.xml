<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每日一库 on </title>
    <link>http://oscome.com/topic/go/</link>
    <description>Recent content in 每日一库 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 Sep 2022 08:48:18 +0800</lastBuildDate><atom:link href="http://oscome.com/topic/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>类型转换cast</title>
      <link>http://oscome.com/topic/go/cast/</link>
      <pubDate>Wed, 21 Sep 2022 10:48:18 +0800</pubDate>
      
      <guid>http://oscome.com/topic/go/cast/</guid>
      <description>引言 # 是否还在为golang麻烦的类型转换烦恼？
尝试一下 spf13 大神的 cast 吧。
项目地址 #  项目地址： https://github.com/spf13/cast
 例子 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  package day001 import ( &amp;#34;testing&amp;#34; &amp;#34;github.com/spf13/cast&amp;#34; ) func TestCast(t *testing.T) { t.Log(&amp;#34;cast.ToString&amp;#34;) t.Log(cast.ToString(&amp;#34;https://oscome.cn&amp;#34;)) t.Log(cast.ToString(8.88)) t.Log(cast.ToString([]byte(&amp;#34;https://oscome.cn&amp;#34;))) var abc interface{} = &amp;#34;https://oscome.cn&amp;#34; t.Log(cast.ToString(abc)) t.Log(&amp;#34;cast.ToInt&amp;#34;) t.Log(cast.ToInt(&amp;#34;8&amp;#34;)) // 后面+E 可以多返回一个 error 参数 	t.</description>
    </item>
    
  </channel>
</rss>
