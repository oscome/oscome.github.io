<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小欧的 kubernetes 笔记 on </title>
    <link>https://oscome.cn/topic/kubernetes/</link>
    <description>Recent content in 小欧的 kubernetes 笔记 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 06 Sep 2022 08:48:18 +0800</lastBuildDate><atom:link href="https://oscome.cn/topic/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>说明</title>
      <link>https://oscome.cn/topic/kubernetes/start/</link>
      <pubDate>Mon, 26 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/start/</guid>
      <description>小欧的 kubernetes 笔记。</description>
    </item>
    
    <item>
      <title>Kubernetes是个啥</title>
      <link>https://oscome.cn/topic/kubernetes/kubernetes%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Tue, 06 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/kubernetes%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>Kubernetes 是什么？  Kubernetes 是用于自动部署，扩展和管理容器化应用程序的开源系统。
Kubernetes 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Kubernetes在 2014 年实现开源，源自Google内部编排工具 Borg 。
部署回溯  1. 传统部署时代：
早期，各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。 例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩展， 并且维护许多物理服务器的成本很高。
2. 虚拟化部署时代：
作为解决方案，引入了虚拟化。虚拟化技术允许你在单个物理服务器的 CPU 上运行多个虚拟机（VM）。 虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应用程序的信息 不能被另一应用程序随意访问。
虚拟化技术能够更好地利用物理服务器上的资源，并且因为可轻松地添加或更新应用程序 而可以实现更好的可伸缩性，降低硬件成本等等。
每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。
3. 容器部署时代：
容器类似于 VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）。 因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。 由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植。
容器因具有许多优势而变得流行起来。下面列出的是容器的一些好处：
 敏捷应用程序的创建和部署：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。 持续开发、集成和部署：通过快速简单的回滚（由于镜像不可变性），支持可靠且频繁的 容器镜像构建和部署。 关注开发与运维的分离：在构建/发布时而不是在部署时创建应用程序容器镜像， 从而将应用程序与基础架构分离。 可观察性：不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。 跨开发、测试和生产的环境一致性：在便携式计算机上与在云中相同地运行。 跨云和操作系统发行版本的可移植性：可在 Ubuntu、RHEL、CoreOS、本地、 Google Kubernetes Engine 和其他任何地方运行。 以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。 松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分， 并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。 资源隔离：可预测的应用程序性能。 资源利用：高效率和高密度。  Kubernetes的功能  Kubernetes 提供以下特性:</description>
    </item>
    
    <item>
      <title>Kubernetes组件</title>
      <link>https://oscome.cn/topic/kubernetes/kubernetes%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 07 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/kubernetes%E7%BB%84%E4%BB%B6/</guid>
      <description>Kubernetes组件  控制平面组件（Control Plane Components）  控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。
控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。 请参阅使用 kubeadm 构建高可用性集群 中关于跨多机器控制平面设置的示例。
kube-apiserver  API 服务器是 Kubernetes 控制面的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。
Kubernetes API 服务器的主要实现是 kube-apiserver。 kube-apiserver 设计上考虑了水平伸缩，也就是说，它可通过部署多个实例进行伸缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。
etcd  etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。
您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。
要了解 etcd 更深层次的信息，请参考 etcd 文档。
kube-scheduler  控制平面组件，负责监视新创建的、未指定运行节点（node）的 Pods，选择节点让 Pod 在上面运行。
调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。
kube-controller-manager  运行控制器进程的控制平面组件。
从逻辑上讲，每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</description>
    </item>
    
    <item>
      <title>kubectl</title>
      <link>https://oscome.cn/topic/kubernetes/kubectl/</link>
      <pubDate>Thu, 08 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/kubectl/</guid>
      <description>kubectl  Kubectl 命令行工具管理 Kubernetes 集群。 kubectl 在 $HOME/.kube 目录中查找一个名为 config 的配置文件。 你可以通过设置 KUBECONFIG 环境变量或设置 &amp;ndash;kubeconfig 参数来指定其它 kubeconfig 文件。
安装  macOS  # install brew install kubectl # test kubectl version --client # 自动补全工具 echo source &amp;lt;(kubectl completion zsh) &amp;gt;&amp;gt; ~/.zshrc  语法  使用以下语法 kubectl 从终端窗口运行命令：
kubectl [command] [TYPE] [NAME] [flags]  其中 command、TYPE、NAME 和 flags 分别是：
  command：指定要对一个或多个资源执行的操作，例如 create、get、describe、delete。
  TYPE：指定资源类型。资源类型不区分大小写， 可以指定单数、复数或缩写形式。例如，以下命令输出相同的结果:
kubectl get pod pod1 kubectl get pods pod1 kubectl get po pod1    NAME：指定资源的名称。名称区分大小写。 如果省略名称，则显示所有资源的详细信息 kubectl get pods。</description>
    </item>
    
    <item>
      <title>镜像</title>
      <link>https://oscome.cn/topic/kubernetes/%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 08 Sep 2022 18:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/%E9%95%9C%E5%83%8F/</guid>
      <description>镜像 image  镜像名称  如果你不指定仓库的主机名，Kubernetes 认为你在使用 Docker 公共仓库。在镜像名称之后，你可以添加一个标签（Tag）。
镜像标签可以包含小写字母、大写字母、数字、下划线（_）、句点（.）和连字符（-）。 关于在镜像标签中何处可以使用分隔字符（_、- 和 .）还有一些额外的规则。 如果你不指定标签，Kubernetes 认为你想使用标签 latest。
镜像拉取策略  imagePullPolicy：
 IfNotPresent：只有当镜像在本地不存在时才会拉取。 Always：每当 kubelet 启动一个容器时，kubelet 会查询容器的镜像仓库， 将名称解析为一个镜像摘要。 如果 kubelet 有一个容器镜像，并且对应的摘要已在本地缓存，kubelet 就会使用其缓存的镜像； 否则，kubelet 就会使用解析后的摘要拉取镜像，并使用该镜像来启动容器。 -Never：Kubelet 不会尝试获取镜像。如果镜像已经以某种方式存在本地， kubelet 会尝试启动容器；否则，会启动失败。  默认镜像拉取策略  当你（或控制器）向 API 服务器提交一个新的 Pod 时，你的集群会在满足特定条件时设置 imagePullPolicy 字段：
 如果你省略了 imagePullPolicy 字段，并且容器镜像的标签是 :latest， imagePullPolicy 会自动设置为 Always。 如果你省略了 imagePullPolicy 字段，并且没有指定容器镜像的标签， imagePullPolicy 会自动设置为 Always。 如果你省略了 imagePullPolicy 字段，并且为容器镜像指定了非 :latest 的标签， imagePullPolicy 就会自动设置为 IfNotPresent。  使用私有仓库  从私有仓库读取镜像时可能需要密钥。 凭证可以用以下方式提供:</description>
    </item>
    
    <item>
      <title>公布应用</title>
      <link>https://oscome.cn/topic/kubernetes/%E5%85%AC%E5%B8%83%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 10 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/%E5%85%AC%E5%B8%83%E5%BA%94%E7%94%A8/</guid>
      <description>涉及的知识点：
 Ingress LoadBalancer  Ingress  我们可以使用之前部署Deployment的Service，具体实现：
apiVersion: networking.k8s.io/v1 kind: Ingress metadata: # Ingress 的名字，仅用于标识 name: sai-ingress spec: # Ingress 中定义 L7 路由规则 rules: # 根据 virtual hostname 进行路由（请使用您自己的域名） - host: sai.13sai.com http: paths: - path: &amp;quot;/&amp;quot; pathType: Prefix backend: service: name: sai # 指定后端的 Service 为之前创建的 sai port: number: 80  LoadBalancer  在使用支持外部负载均衡器的云提供商的服务时，设置 type 的值为 &amp;quot;LoadBalancer&amp;quot;， 将为 Service 提供负载均衡器。 负载均衡器是异步创建的，关于被提供的负载均衡器的信息将会通过 Service 的 status.loadBalancer 字段发布出去。
apiVersion: v1 kind: Service metadata: name: sai-lb spec: selector: app: sai ports: - protocol: TCP port: 80 targetPort: 80 clusterIP: 10.</description>
    </item>
    
    <item>
      <title>部署Deployment</title>
      <link>https://oscome.cn/topic/kubernetes/%E9%83%A8%E7%BD%B2deployment/</link>
      <pubDate>Fri, 09 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/%E9%83%A8%E7%BD%B2deployment/</guid>
      <description>我们以部署一个可访问http服务的为例，涉及的知识点：
 ConfigMap Service Deployment kubectl port-forward  编写yaml  # sai-config.yaml # 定义 ConfigMap apiVersion: v1 kind: ConfigMap metadata: # 元数据，定义基本属性和信息 name: sai-config # 名称 data: config.yaml: |- name: sai0556 mode: debug addr: :8080 hi: w~o~w --- # 定义 Service apiVersion: v1 kind: Service metadata: name: sai labels: # 标签 app: sai spec: # 描述 ports: - protocol: TCP port: 80 # Service的虚拟端口 targetPort: 8080 # 容器暴露的端口 selector: # 选择器，对应下面的 Deployment的 labels app: sai --- # 定义 Deployment apiVersion: apps/v1 kind: Deployment metadata: name: sai spec: replicas: 1 # 创建应用程序实例个数 selector: # 标签选择器 matchLabels: # 选择包含标签app:sai的资源 app: sai template: # 模板 metadata: labels: app: sai spec: containers: - name: sai image: 13sai/k8s-configmap-sai:0.</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://oscome.cn/topic/kubernetes/service/</link>
      <pubDate>Sat, 10 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/service/</guid>
      <description>涉及的知识点：
 Service Endpoints  外部服务 Service  需注意 Service 是一个不带 selector 的，否则就会自动创建 Endpoint，name 保持一致即可。
apiVersion: v1 kind: Service metadata: name: to-external spec: type: NodePort ports: - port: 80 nodePort: 31081 protocol: TCP --- apiVersion: v1 kind: Endpoints metadata: name: to-external subsets: - addresses: - ip: 11.50.24.32 ports: - port: 80  这样就可以通过 http://127.0.0.1:31081 访问了。</description>
    </item>
    
    <item>
      <title>CronJob</title>
      <link>https://oscome.cn/topic/kubernetes/cronjob/</link>
      <pubDate>Mon, 12 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/cronjob/</guid>
      <description>涉及的知识点：
 CronJob kubectl delete, kubectl logs  CronJob 有点类似Linux的crontab。
# cronjob.yaml apiVersion: batch/v1 kind: CronJob metadata: name: hello spec: # ┌───────────── 分钟 (0 - 59) # │ ┌───────────── 小时 (0 - 23) # │ │ ┌───────────── 月的某天 (1 - 31) # │ │ │ ┌───────────── 月份 (1 - 12) # │ │ │ │ ┌───────────── 周的某天 (0 - 6)（周日到周一） # │ │ │ │ │ 或者是 sun，mon，tue，web，thu，fri，sat # │ │ │ │ │ # │ │ │ │ │ # * * * * * schedule: &amp;quot;*/1 * * * *&amp;quot; jobTemplate: spec: template: spec: containers: - name: hello image: busybox imagePullPolicy: IfNotPresent args: - /bin/sh - -c - date; sleep 30; echo Hello, 13sai from the Kubernetes cluster restartPolicy: OnFailure   kubectl apply -f cronjob.</description>
    </item>
    
    <item>
      <title>PVC</title>
      <link>https://oscome.cn/topic/kubernetes/pvc/</link>
      <pubDate>Sat, 10 Sep 2022 08:48:18 +0800</pubDate>
      
      <guid>https://oscome.cn/topic/kubernetes/pvc/</guid>
      <description>Kubernetes 对于有状态的日期应用或者对于数据需要持久化的应用，就需要更可靠的存储来保存应用产生的重要数据了。这里需要的就是持久卷（PersistentVolume）和 持久卷申领（PersistentVolumeClaim）。
涉及的知识点：
 PV PVC StorageClass StatefulSet Service  持久卷（PersistentVolume，PV）是集群中的一块存储，可以事先供应，或者使用存储类（Storage Class）来动态供应。 持久卷是集群资源，就像节点也是集群资源一样。PV 持久卷和普通的 Volume 一样，也是使用 卷插件来实现的，只是它们拥有独立于任何使用 PV 的 Pod 的生命周期。 此 API 对象中记述了存储的实现细节，无论其背后是 NFS、iSCSI 还是特定于云平台的存储系统。
持久卷申领（PersistentVolumeClaim，PVC）表达的是用户对存储的请求。概念上与 Pod 类似。 Pod 会耗用节点资源，而 PVC 申领会耗用 PV 资源。Pod 可以请求特定数量的资源（CPU 和内存）；同样 PVC 申领也可以请求特定的大小和访问模式 （例如，可以要求 PV 卷能够以 ReadWriteOnce、ReadOnlyMany 或 ReadWriteMany 模式之一来挂载，参见访问模式）。
下面以 influxdb 为例子：
# 单独弄个Namespace influxdb apiVersion: v1 kind: Namespace metadata: name: influxdb --- # 配置文件弄个ConfigMap，便于修改 apiVersion: v1 kind: ConfigMap metadata: name: influxdb-config namespace: influxdb data: influxdb.</description>
    </item>
    
  </channel>
</rss>
